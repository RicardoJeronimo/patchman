#!/bin/bash

usage() {
	# Shows all available arguments
	echo "$0 [-h] [-a] [-H hostname]"
	echo "-h: Shows this help message and exits"
	echo "-a: E-mails the available updates to all recipients"
	echo "-H hostname: E-mails the hostname's available updates to the recipient"
}

getConfig() {
	# Gets the configuration of section $1, parameter $2
	val=$(sed -nr "/\[$1\]/,/\[/{/^(\W|)$2=/p}" $CONF)
	val=${val#$2=}

	echo "$val"
}

report() {
	UPDATES=$(patchman -lh -H $1 | tail -n +3 | head -n -1 | awk 'NR==10' | awk -F ' : ' '{ print $2 }')			# Gets the number of updates available for the host
	
	if [ -z $UPDATES ]; then
		echo "ERROR: Hostname not found."
	elif [ $UPDATES -gt 0 ]; then
		TAGS=$(patchman -lh -H $1 | tail -n +3 | head -n -1 | awk 'NR==11' | awk -F ' : ' '{ print $2 }')			# Gets the host's tags to determine the recipient
		RECIPIENT=$(getConfig $TAGS recipient)
		FILE=$DIR/$TAGS/$1-$(date +%Y%m%d).html
		
		mkdir -p $(echo $FILE | sed 's|\(.*\)/.*|\1|')			# Creates the directory where the e-mail file will be stored, if it doesn't exist

		# Creates the report
		echo "<html>" > $FILE
		echo "<style>" >> $FILE
		echo "body { font-family: \"Calibri\"  }" >> $FILE
		echo "#details table { border-collapse: collapse; width: 20em; }" >> $FILE
		echo "#updates table { border-collapse: collapse; width: 100%; }" >> $FILE
		echo "#details th, #details tr, #details td { text-align: left; }" >> $FILE
		echo "#updates th, #updates td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }" >> $FILE
		echo "</style>" >> $FILE

		echo "<body>" >> $FILE
		echo "<p>There are new updates available for <b>$1</b>:</p><br>" >> $FILE

		echo "<div id=\"details\"><table>" >> $FILE
		patchman -lh -H $1 | tail -n +3 | head -n -1 | awk 'NR!=2 && NR!=7 && NR!=9 && NR!=11 && NR!=13 && NR!=14' | awk -F ' : ' '{ print "<tr><th>"$1":</th><td>"$2"</td></tr>" }' >> $FILE
		echo "</table></div><br>" >> $FILE

		echo "<div id=\"updates\"><table>" >> $FILE
		patchman -u -H $1 | tail -n +3 | head -n -1 | sed 's/\x1b\[[0-9;]*m//g' |  awk 'BEGIN { print "<tr><th>Current Version</th><th>New Version</th><th>Type</th></tr>" }
																								{ print "<tr><td>"$1"</td><td>"$3"</td><td>"$4"</td></tr>" }' >> $FILE
		echo "</table></div><br>" >> $FILE

		echo "<p>Please contact your System Administrator in order to schedule the updates.</p>" >> $FILE

		echo "</body>" >> $FILE
		echo "</html>" >> $FILE

		# E-mails the report
		(
			echo "From: test@example.com" 
			echo "To: $RECIPIENT"
    			echo "Subject: [$1] Update Report"
    			echo "Content-Type: text/html"
    			echo
    			cat $FILE
		) | sendmail -t

		# Deletes the file
		if [ ! $KEEP ]; then
			rm $FILE
		fi

		echo "[$1] INFO: E-Mail report sent."
	else
		echo "[$1] INFO: There are no updates available."
	fi
}

# Checks if there are any parameters and if they start with "-"
if [ $# -gt 0 ] && [[ $1 == -* ]]; then
	CONF="/etc/patchman/patchman-email.conf"
	
	while getopts 'haHT:' arg; do
		case $arg in
			h)
				usage
			;;
			a)
				if [ ! -f $CONF ]; then
					echo "ERROR: Configuration file not found."
					exit
				else
					DIR=$(getConfig General dir)
					KEEP=$(getConfig General keep)
					
					HOSTS=()
					HOSTS+=$(patchman -lh | tail -n +3 | awk 'NR%16==1' | awk -F '[.:]' '{ print $1 }' | sed 's/\x1b\[[0-9;]*m//g')

					for HOST in $HOSTS; do
						report $HOST
					done
				fi
			;;
			H)
				if [ ! -f $CONF ]; then
					echo "ERROR: Configuration file not found."
					exit
				else
					DIR=$(getConfig General dir)
					KEEP=$(getConfig General keep)
					
					report ${OPTARG}
				fi
			;;
			T)
				# TODO: Create reports for given tag
			;;
			*)
				usage
			;;
		esac
	done
else
	usage
fi
