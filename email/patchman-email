#!/bin/bash

usage() {
	# Shows all available arguments
	echo "$0 [-a] [-H hostname] [-T tag] [-h]"
	echo "-a: E-mails all recipients with available updates"
	echo "-H hostname: E-mails recipient with all available updates for given host"
	echo "-T tag: E-mails recipient with all available updates for given tag"
	echo "-h: Shows this help message and exits"
}

getConfig() {
	# Gets the configuration of section $1, parameter $2
	val=$(sed -nr "/\[$1\]/,/\[/{/^(\W|)$2=/p}" $CONF)
	val=${val#$2=}

	echo $val
}

email() {	
	ATTACHMENTS=()
	BOUNDARY=$(uuidgen)
	RECIPIENT=$(getConfig $1 recipient)
	SENDER=$(getConfig General sender)
	FULLNAME=$(getConfig General fullname)
	SUBJECT=$(echo "[$1] $(getConfig General subject)" | base64)
	BODY="<html><style>
		body { font-family: \"Calibri\" }
		hr { border: 0; height: 1px; background: #333 }
		#info { font-size: 1em }
		#disclaimer { font-size: 0.8em }
		</style><body>
		<div id=\"info\">
		<h2>Server Update Report</h2>
		<p>There are new updates available for your servers.</p> 
		<p>Attached to this e-mail, you'll find each system's individual report.</p><br>
		<p>Please contact your System Administrator in order to schedule the updates.</p></div>
		<br><hr>
		</div><div id=\"disclaimer\">
		DISCLAIMER<br>The information in this email is confidential and should only be read by the person or entity to whom it is addressed. 
		If you have received this communication by mistake, please notify the sender and immediately delete the message and 
		the attached files without reading, copying, recording, distributing, disseminating or making any other use of the information. 
		Remember your Environmental Responsibility before deciding to print this email.
		</div></body></html>"

	if [ -z $2 ]; then
		ATTACHMENTS+=$(ls $DIR/$1/*-$DATE.html)
	else
		ATTACHMENTS+=$(ls $DIR/$1/$2-$DATE.html)
	fi

	echo "[INFO] $1: E-mailing report..."

	EMAIL=$((
		echo "To: $RECIPIENT"
		echo "Subject: =?UTF-8?B?$SUBJECT?="
		echo "MIME-Version: 1.0"
		echo "Content-Type: multipart/mixed; boundary=\"$BOUNDARY\""
		echo ""
		echo "--$BOUNDARY"
		echo "Content-Type: text/html; charset=UTF-8"
		echo "Content-Disposition: inline"
		echo ""
		echo $BODY
		for ATTACH in $ATTACHMENTS; do
			echo ""
			echo "--$BOUNDARY"
			echo "Content-Type: text/html;"
			echo "Content-Transfer-Encoding: uuencode"
			echo "Content-Disposition: attachment; filename=\"$(basename $ATTACH)\""
			echo ""
			uuencode $ATTACH $(basename $ATTACH)
		done
		echo "--$BOUNDARY--"
		) | sendmail -t -f $SENDER -F "$FULLNAME")

	if [ -z $EMAIL ]; then
		echo "[SUCCESS] $1: E-mail report sent."
	else
		echo "[ERROR] $1: E-mail report failed."
	fi
}

report() {
	# Gets host info
	HOST=$(patchman -lh -H $1 | tail -n +3 | head -n -1 | sed 's/\x1b\[[0-9;]*m//g')
	
	# Gets the number of updates available for the host
	UPDATES=$(echo "$HOST" | awk -F ' : ' 'NR==10 { print $2 }')				
	
	if [ -z $UPDATES ]; then
		echo "[ERROR] $1: Hostname not found."
	elif [ $UPDATES -gt 0 ]; then	
		# Gets the hosts tags to determine the recipient and directory
		TAG=$(echo "$HOST" | awk -F ' : ' 'NR==11 { print $2 }')	
		
		# Creates the directory where the e-mail file will be stored, if it doesnt exist
		FILE=$DIR/$TAG/$1-$DATE.html
		mkdir -p $(echo $FILE | sed 's|\(.*\)/.*|\1|')				
	
		# Creates the report if it doesnt exist
		if [ ! -f $FILE ]; then	
			echo "[INFO] $TAG $1: Creating report..."
		
			echo "<html><style>" > $FILE
			echo "body { font-family: \"Calibri\"  }" >> $FILE
			echo "#details table { border-collapse: collapse; width: 20em; }" >> $FILE
			echo "#updates table { border-collapse: collapse; width: 100%; }" >> $FILE
			echo "#details th, #details tr, #details td { text-align: left; }" >> $FILE
			echo "#updates th, #updates td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }" >> $FILE
			echo "</style><head><meta charset=\"UTF-8\"></head><body>" >> $FILE
			echo "<div id=\"details\"><table>" >> $FILE
			echo "$HOST" | awk -F ' : ' 'NR!=7 && NR!=9 && NR!=11 && NR!=13 && NR!=14 { print "<tr><th>"$1":</th><td>"$2"</td></tr>" }' | sed 's/Reverse DNS/Hostname/g' >> $FILE
			echo "</table></div><br>" >> $FILE
			echo "<div id=\"updates\"><table>" >> $FILE
			echo "<tr><th>Current Version</th><th>New Version</th><th>Type</th></tr>" >> $FILE
			patchman -u -H $1 | tail -n +3 | head -n -1 | sed 's/\x1b\[[0-9;]*m//g' |  awk '{ print "<tr><td>"$1"</td><td>"$3"</td><td>"$4"</td></tr>" }' >> $FILE
			echo "</table></div><br>" >> $FILE
			echo "</body></html>" >> $FILE
		else
			echo "[INFO] $TAG $1: Report exists, skipping."
		fi
	else
		echo "[INFO] $TAG $1: There are no updates available."
	fi
}

# Checks if there are any parameters and if they start with "-"
if [ $# -gt 0 ] && [[ $1 == -* ]]; then
	CONF="/etc/patchman/patchman-email.conf"
	
	while getopts 'aH:T:h' arg; do
		case $arg in
			a)
				if [ ! -f $CONF ]; then
					echo "[ERROR] Configuration file not found."
					exit
				else
					DIR=$(getConfig General dir)
					DATE=$(date +%Y%m%d)
					HOSTS=()
					TAGS=()
					HOSTS+=$(patchman -lh | tail -n +3 | awk -F ' : ' 'NR%16==3 { print $2 }' | sed 's/\x1b\[[0-9;]*m//g')
					TAGS=$(patchman -lh | tail -n +3 | awk -F ' : ' 'NR%16==12 { print $2 }' | sed 's/\x1b\[[0-9;]*m//g' | sort -n | uniq)

					# Generate report
					for HOST in $HOSTS; do
						report $HOST 
					done

					# E-mails the report
					for TAG in $TAGS; do
						email $TAG
					done
				fi
			;;
			H)
				if [ ! -f $CONF ]; then
					echo "[ERROR] Configuration file not found."
					exit
				else
					DIR=$(getConfig General dir)
					DATE=$(date +%Y%m%d)
					HOSTS=${OPTARG}
	
					report $HOSTS

					email $TAG $HOSTS
				fi
			;;
			T)				
				if [ ! -f $CONF ]; then
					echo "[ERROR] Configuration file not found."
					exit
				else
					DIR=$(getConfig General dir)
					DATE=$(date +%Y%m%d)
					HOSTS=()
					HOSTS+=$(patchman -lh | tail -n +3 | awk -F ' : ' 'NR%16==3 || NR%16==12 {print $2}' | paste -d : - - | awk -F ':' '{ if( $2 == "'${OPTARG}'" ){ print $1 }}' | sed 's/\x1b\[[0-9;]*m//g')

					if [ -z "$HOSTS" ]; then
						echo "[ERROR] ${OPTARG}: Tag not found."
					else
						for HOST in $HOSTS; do
							report $HOST 
						done

						email $TAG
					fi
				fi
			;;
			h)
				usage
			;;
			*)
				usage
			;;
		esac
	done
else
	usage
fi

