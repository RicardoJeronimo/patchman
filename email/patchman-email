#!/bin/bash

email() {
    SENDER=$(getConfig General sender)

    if [ -n "$SENDER" ]; then
        RECIPIENT=$(getConfig "$1" recipient)
    
        if [ -n "$RECIPIENT" ]; then
            ATTACHMENTS=()
            BOUNDARY=$(uuidgen)
            CC=$(getConfig "$1" cc)
            BCC=$(getConfig "$1" bcc)
            FULLNAME=$(getConfig General fullname)
            SUBJECT=$(echo "[$1] $(getConfig General subject)" | base64)

            if [ -s "$custom_html" ]; then
                BODY=$(cat $custom_html)
            else
                BODY="<html><style>
                    body { font-family: \"Calibri\" }
                    hr { border: 0; height: 1px; background: #333 }
                    #info { font-size: 1em }
                    #disclaimer { font-size: 0.8em }
                    </style><body>
                    <div id=\"info\">
                    <h2>Server Update Report</h2>
                    <p>There are new updates available for your servers.</p>
                    <p>Attached to this e-mail, you'll find each system's individual report.</p><br>
                    <p>Please contact your System Administrator in order to schedule the updates.</p></div>
                    <br><hr>
                    </div><div id=\"disclaimer\">
                    DISCLAIMER<br>The information in this email is confidential and should only be read by the person or entity to whom it is addressed.
                    If you have received this communication by mistake, please notify the sender and immediately delete the message and
                    the attached files without reading, copying, recording, distributing, disseminating or making any other use of the information.
                    Remember your Environmental Responsibility before deciding to print this email.
                    </div></body></html>"
            fi

            if [ -z "$2" ]; then
                mapfile -t ATTACHMENTS < <(ls "$DIR"/"$1"/*-"$DATE".pdf)
            else
                mapfile -t ATTACHMENTS < <(ls "$DIR"/"$1"/"$2"-"$DATE".pdf)
            fi
            
            echo "$(date '+%d/%m/%Y %R') [INFO] $1: E-mailing report..."
            
            (echo "From: $FULLNAME"
            echo "To: $RECIPIENT"
            echo "Cc: $CC"
            echo "Bcc: $BCC"
            echo "Subject: =?UTF-8?B?$SUBJECT?="
            echo "MIME-Version: 1.0"
            echo "Content-Type: multipart/mixed; boundary=\"$BOUNDARY\""
            echo ""
            echo "--$BOUNDARY"
            echo "Content-Type: text/html; charset=UTF-8"
            echo "Content-Disposition: inline"
            echo ""
            echo "$BODY"
            for ATTACH in "${ATTACHMENTS[@]}"; do
                echo ""
                echo "--$BOUNDARY"
                echo "Content-Type: text/html;"
                echo "Content-Transfer-Encoding: uuencode"
                echo "Content-Disposition: attachment; filename=\"$(basename "$ATTACH")\""
                echo ""
                uuencode "$ATTACH" "$(basename "$ATTACH")"
            done
            echo "--$BOUNDARY--"
            ) | /usr/sbin/sendmail -t -f "$SENDER"
            
            if [ $? -eq 0 ]; then
                echo "$(date '+%d/%m/%Y %R') [SUCCESS] $1: E-mail report sent."
            else
                echo "$(date '+%d/%m/%Y %R') [ERROR] $1: E-mail report failed."
            fi
        else
            echo "$(date '+%d/%m/%Y %R') [ERROR] $1: No recipient address found."
        fi
    else
        echo "$(date '+%d/%m/%Y %R') [ERROR] No sender address found."
    fi
}

getConfig() {
    # Gets the configuration of section $1, parameter $2
    val=$(sed -nr "/\[$1\]/,/\[/{/^(\W|)$2=/p}" $CONF)
    echo ${val#$2=}
}

getPackages() {
    MYSQL_PWD="$mysql_pass" mysql -u "$mysql_user" -h "$mysql_host" -P "$mysql_port" -D "$mysql_db" -Nrse \
        "SELECT \`update\`
        FROM hosts_host
        LEFT JOIN (
            SELECT host_id, package.\`update\`
            FROM hosts_host_updates
            LEFT JOIN (
                SELECT packages_packageupdate.id, CONCAT(oldpackage.package, \" -> \", newpackage.package, \" \", IF(security=0, \"(Bugfix)\", \"(Security)\")) AS \`update\`
                FROM packages_packageupdate
                LEFT JOIN (
                    SELECT packages_package.id, CONCAT_WS(\"\", packages_packagename.name, \"-\", NULLIF(CONCAT(epoch, \":\"), ':'), version, \"-\", \`release\`, \"-\", arch_packagearchitecture.name) 
                    AS package
                    FROM packages_package
                    LEFT JOIN packages_packagename ON packages_package.name_id=packages_packagename.id
                    LEFT JOIN arch_packagearchitecture ON packages_package.arch_id=arch_packagearchitecture.id
                ) AS oldpackage ON packages_packageupdate.oldpackage_id=oldpackage.id
                RIGHT JOIN (
                    SELECT packages_package.id, CONCAT_WS(\"\", packages_packagename.name, \"-\", NULLIF(CONCAT(epoch, \":\"), ':'), version, \"-\", \`release\`, \"-\", arch_packagearchitecture.name)
                    AS package
                    FROM packages_package
                    LEFT JOIN packages_packagename ON packages_package.name_id=packages_packagename.id
                    LEFT JOIN arch_packagearchitecture ON packages_package.arch_id=arch_packagearchitecture.id
                ) AS newpackage ON packages_packageupdate.newpackage_id=newpackage.id
            ) AS package ON hosts_host_updates.packageupdate_id=package.id
        ) AS updates ON hosts_host.id=updates.host_id
        WHERE hosts_host.hostname=\"$1\";"
}

report() {
    # Gets host info
    HOST=$(patchman -lh -H "$1" | tail -n +2 | head -n -1 | sed 's/\x1b\[[0-9;]*m//g')
    
    # Gets the number of updates available for the host
    UPDATES=$(echo "$HOST" | awk -F ' : ' 'NR==10 { print $2 }')
    
    if [ -z "$UPDATES" ]; then
        echo "$(date '+%d/%m/%Y %R') [ERROR] $1: Hostname not found."
    elif [ "$UPDATES" -gt 0 ]; then
        # Gets the hosts tags to determine the recipient and directory
        TAG=$(echo "$HOST" | awk -F ' : ' 'NR==12 { print $2 }')
        
        # Creates the directory where the e-mail file will be stored, if it doesnt exist
        mkdir -p "$DIR/$TAG"
        FILE=$DIR/$TAG/$1-$DATE
        
        # Queries the database for available package updates
        QUERY=$(getPackages "$1")
        
        # Creates the report if it doesnt exist
        if [ ! -f "$FILE.pdf" ]; then
            echo "$(date '+%d/%m/%Y %R') [INFO] $TAG $1: Creating report..."
            
            cat <<-EOF > "$FILE.html"
			<html><style>
			body { font-family: "Calibri" }
			#details table { border-collapse: collapse; width: 20em; white-space: nowrap;}
			#updates table { border-collapse: collapse; width: 100%; }
			#details th, #details tr, #details td { text-align: left; }
			#updates th, #updates td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
			@page { size: A4 landscape; }
			</style><head><meta charset="UTF-8"></head><body>
			<div id="details"><table>
			$(echo "$HOST" | awk -F ' : ' 'NR==1 {print "<tr><th>"$1"</th></tr>"; next} NR==2 || NR==4 || NR==5 || NR==6 || NR==7 || NR==9 || NR==11 { print "<tr><th>"$1"</th><th>:&nbsp;</th><td>"$2"</td></tr>" }')
			</table></div><br>
			<div id=\"updates\"><table>
			<tr><th>Current Version</th><th>New Version</th><th>Type</th></tr>
			$(echo "$QUERY" | sort -n | uniq | sed 's/[()]//g' | awk '{ print "<tr><td>"$1"</td><td>"$3"</td><td>"$4"</td></tr>" }')
			</table></div><br>
			</body></html>
			EOF

            if weasyprint "$FILE.html" "$FILE.pdf"; then
                rm "$FILE.html"
            fi
        else
            echo "$(date '+%d/%m/%Y %R') [INFO] $TAG $1: Report exists, skipping."
        fi
    else
        echo "$(date '+%d/%m/%Y %R') [INFO] $TAG $1: There are no updates available."
    fi
}

usage() {
    # Shows all available arguments
    echo "$0 [-a] [-H hostname] [-T tag] [-h]"
    echo "-a: E-mails all recipients with available updates"
    echo "-H hostname: E-mails recipient with all available updates for given host"
    echo "-T tag: E-mails recipient with all available updates for given tag"
    echo "-h: Shows this help message and exits"
}

# Checks if there are any parameters and if they start with "-"
if [ $# -gt 0 ] && [[ $1 == -* ]]; then
    CONF="/etc/patchman/patchman-email.conf"
    custom_html="/etc/patchman/patchman-email.html"
    
    # Database credentials configured in /etc/patchman/local_settings.py
    mysql_db=$(grep -E "'NAME'" /etc/patchman/local_settings.py | grep -v "#" | sed -e "s/'\|,//g" | awk -F " " '{print $2}')
    mysql_user=$(grep -E "'USER'" /etc/patchman/local_settings.py | grep -v "#" | sed -e "s/'\|,//g" | awk -F " " '{print $2}')
    mysql_pass=$(grep -E "'PASSWORD'" /etc/patchman/local_settings.py | grep -v "#" | sed -e "s/'\|,//g" | awk -F " " '{print $2}')
    mysql_host=$(grep -E "'HOST'" /etc/patchman/local_settings.py | grep -v "#" | sed -e "s/'\|,//g" | awk -F " " '{print $2}')
    mysql_port=$(grep -E "'PORT'" /etc/patchman/local_settings.py | grep -v "#" | sed -e "s/'\|,//g" | awk -F " " '{print $2}')
    
    while getopts 'aH:T:h' arg; do
        case $arg in
            a)
                if [ ! -f $CONF ]; then
                    echo "$(date '+%d/%m/%Y %R') [ERROR] Configuration file not found."
                    exit 1
                else
                    DIR=$(getConfig General dir)
                    DATE=$(date +%Y%m%d)
                    HOSTS=()
                    TAGS=()
                    mapfile -t HOSTS < <(patchman -lh | tail -n +3 | awk -F ' : ' 'NR%16==1 { print $1 }' | tr -d ":" | sed 's/\x1b\[[0-9;]*m//g')
                    mapfile -t TAGS < <(patchman -lh | tail -n +3 | awk -F ' : ' 'NR%16==12 { print $2 }' | sort -n | uniq | sed 's/\x1b\[[0-9;]*m//g')
                    
                    # Generate report
                    for HOST in "${HOSTS[@]}"; do
                        report "$HOST"
                    done
                    
                    # E-mails the report
                    for TAG in "${TAGS[@]}"; do
                        email "$TAG"
                    done
                fi
                ;;
            H)
                if [ ! -f $CONF ]; then
                    echo "$(date '+%d/%m/%Y %R') [ERROR] Configuration file not found."
                    exit 1
                else
                    DIR=$(getConfig General dir)
                    DATE=$(date +%Y%m%d)
                    HOST=${OPTARG}
                    
                    report "$HOST"
                    email "$TAG" "$HOST"
                fi
                ;;
            T)
                if [ ! -f $CONF ]; then
                    echo "$(date '+%d/%m/%Y %R') [ERROR] Configuration file not found."
                    exit 1
                else
                    DIR=$(getConfig General dir)
                    DATE=$(date +%Y%m%d)
                    HOSTS=()
                    mapfile -t HOSTS < <(patchman -lh | tail -n +3 | awk -F ' : ' 'NR%16==1 {print $1; next} NR%16==12 {print $2}' | tr -d ":" | paste -d : - - | awk -F ':' '{ if( $2 == "'"${OPTARG}"'" ){ print $1 }}' | sed 's/\x1b\[[0-9;]*m//g')
                    
                    if [ "${#HOSTS[@]}" -gt 0 ]; then
                        for HOST in "${HOSTS[@]}"; do
                            report "$HOST"
                        done
                        
                        email "$TAG"
                    else
                        echo "$(date '+%d/%m/%Y %R') [ERROR] ${OPTARG}: Tag not found."
                        exit 1
                    fi
                fi
                ;;
            h)
                usage
                exit 0
                ;;
            *)
                usage
                exit 2
                ;;
        esac
    done
else
    usage
    exit 2
fi

